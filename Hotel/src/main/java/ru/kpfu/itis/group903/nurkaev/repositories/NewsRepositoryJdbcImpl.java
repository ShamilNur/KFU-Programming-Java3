package ru.kpfu.itis.group903.nurkaev.repositories;

import ru.kpfu.itis.group903.nurkaev.models.News;

import javax.sql.DataSource;
import java.sql.*;
import java.util.List;
import java.util.Optional;

import static ru.kpfu.itis.group903.nurkaev.queries.NewsQueries.SQL_INSERT;
import static ru.kpfu.itis.group903.nurkaev.queries.NewsQueries.SQL_SELECT_BY_TAG;
import static ru.kpfu.itis.group903.nurkaev.queries.RoomQueries.*;

/**
 * @author Shamil Nurkaev @nshamil
 * 11-903
 * Sem 1
 */

public class NewsRepositoryJdbcImpl implements NewsRepository {

    private final DataSource dataSource;
    private final SimpleJdbcTemplate template;

    private final RowMapper<News> newsRowMapper = row -> News.builder()
            .id(row.getLong("id"))
            .title(row.getString("title"))
            .description(row.getString("description"))
            .photo(row.getString("photo"))
            .build();

    public NewsRepositoryJdbcImpl(DataSource dataSource) {
        this.dataSource = dataSource;
        this.template = new SimpleJdbcTemplate(dataSource);
    }

    @Override
    public void save(News entity) {
        try (Connection connection = dataSource.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS)) {

            int i = 1;
            preparedStatement.setString(i++, entity.getTitle());
            preparedStatement.setString(i++, entity.getDescription());
            preparedStatement.setString(i, entity.getPhoto());

            preparedStatement.executeUpdate();

            // setting the ID value generated by the database
            try (ResultSet resultSet = preparedStatement.getGeneratedKeys()) {
                resultSet.next();
                Long id = resultSet.getLong(1);
                entity.setId(id);
            }
        } catch (SQLException e) {
            throw new IllegalStateException(e);
        }
    }

    @Override
    public void update(News entity) {
        template.query(SQL_UPDATE_BY_ID, newsRowMapper, entity.getTitle(), entity.getDescription(), entity.getPhoto());
    }

    @Override
    public void delete(News entity) {
        template.query(SQL_DELETE_BY_ID, newsRowMapper, entity.getId());
    }

    @Override
    public Optional<News> findById(Long id) {
        // this query will return list with only one rooms.
        // findAny returns this rooms.
        return template.queryForList(SQL_SELECT_BY_ID, newsRowMapper, id).stream().findAny();
    }

    @Override
    public List<News> findByTag(String tagName) {
        return template.queryForList(SQL_SELECT_BY_TAG, newsRowMapper, tagName);
    }

    @Override
    public List<News> findAll() {
        return template.queryForList(SQL_SELECT, newsRowMapper);
    }
}
