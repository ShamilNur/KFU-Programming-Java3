package ru.kpfu.itis.group903.nurkaev.repositories;

import ru.kpfu.itis.group903.nurkaev.exceptions.NoRoomsAvailableException;
import ru.kpfu.itis.group903.nurkaev.forms.AvailabilityForm;
import ru.kpfu.itis.group903.nurkaev.models.Room;

import javax.sql.DataSource;
import java.sql.*;
import java.util.List;
import java.util.Optional;

import static ru.kpfu.itis.group903.nurkaev.queries.RoomQueries.*;
import static ru.kpfu.itis.group903.nurkaev.queries.UserQueries.SQL_INSERT;

/**
 * @author Shamil Nurkaev @nshamil
 * 11-903
 * Sem 1
 */

public class RoomsRepositoryJdbcImpl implements RoomsRepository {

    private final DataSource dataSource;
    private final SimpleJdbcTemplate template;

    private final RowMapper<Room> roomRowMapper = row -> Room.builder()
            .id(row.getLong("id"))
            .name(row.getString("name"))
            .photo(row.getString("photo"))
            .dateFrom(row.getLong("date_from"))
            .dateTo(row.getLong("date_to"))
            .roomsNumber(row.getInt("rooms_number"))
            .adultsNumber(row.getInt("adults_number"))
            .childNumber(row.getInt("child_number"))
            .price(row.getInt("price"))
            .build();

    public RoomsRepositoryJdbcImpl(DataSource dataSource) {
        this.dataSource = dataSource;
        this.template = new SimpleJdbcTemplate(dataSource);
    }

    @Override
    public void save(Room entity) {
        try (Connection connection = dataSource.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS)) {

            int i = 1;
            preparedStatement.setString(i++, entity.getName());
            preparedStatement.setString(i++, entity.getPhoto());
            preparedStatement.setLong(i++, entity.getDateFrom());
            preparedStatement.setLong(i++, entity.getDateTo());
            preparedStatement.setInt(i++, entity.getRoomsNumber());
            preparedStatement.setInt(i++, entity.getAdultsNumber());
            preparedStatement.setInt(i++, entity.getChildNumber());
            preparedStatement.setInt(i, entity.getPrice());

            preparedStatement.executeUpdate();

            // setting the ID value generated by the database
            try (ResultSet resultSet = preparedStatement.getGeneratedKeys()) {
                resultSet.next();
                Long id = resultSet.getLong(1);
                entity.setId(id);
            }
        } catch (SQLException e) {
            throw new IllegalStateException(e);
        }
    }

    @Override
    public void update(Room entity) {
        template.query(SQL_UPDATE_BY_ID, roomRowMapper, entity.getName(), entity.getDateFrom(),
                entity.getDateTo(), entity.getRoomsNumber(), entity.getAdultsNumber(), entity.getChildNumber());
    }

    @Override
    public void delete(Room entity) {
        template.query(SQL_DELETE_BY_ID, roomRowMapper, entity.getId());
    }

    @Override
    public Optional<Room> findById(Long id) {
        // this query will return list with only one user.
        // findAny returns this user.
        return template.queryForList(SQL_SELECT_BY_ID, roomRowMapper, id).stream().findAny();
    }

    @Override
    public List<Room> findAll() {
        return template.queryForList(SQL_SELECT, roomRowMapper);
    }

    @Override
    public Optional<Room> findByName(String name) {
        // this query will return list with only one user.
        // findAny returns this user.
        return template.queryForList(SQL_SELECT_BY_NAME, roomRowMapper, name).stream().findAny();

    }

    @Override
    public List<Room> getAvailableRooms(AvailabilityForm availabilityForm) throws NoRoomsAvailableException {
        List<Room> rooms = template.queryForList(SQL_SELECT_BY_AVAILABLE_FORM, roomRowMapper, availabilityForm.getDateFrom());
        if (rooms.size() > 0) {
            return rooms;
        } else throw new NoRoomsAvailableException();
    }
}
